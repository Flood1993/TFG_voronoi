#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsart
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 1
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Recomendaciones de formato y contenido de la memoria https://www.fi.upm.es/?pagina=
2031 
\end_layout

\begin_layout Title
ADJUSTING PLANE PARTITIONS THROUGH VORONOI DIAGRAMS
\end_layout

\begin_layout Standard
Supervisor Manuel Abellanas mabellanas@fi.upm.es 
\end_layout

\begin_layout Standard
Student Guillermo Alonso Núñez guillermo.alonso.nunez@alumnos.upm.es
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part*
INDEX
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part*
SUMMARY
\end_layout

\begin_layout Standard
The inverse Voronoi diagram problem is about detecting whether a given plane
 partition is a Voronoi diagram and finding the initial points that would
 generate such a partition.
 For a partition which does not come from a Voronoi diagram, it would be
 an interesting question to find the best fitting Voronoi diagram.
 That is, finding the diagram whose total sum for each polygons symmetric
 difference is minimized.
 The aim of this project is to develop a program to adjust plane partitions
 through the use of Voronoi diagrams.
\end_layout

\begin_layout Part*
RESUMEN
\end_layout

\begin_layout Standard
El problema inverso del diagrama de Voronoi consiste en reconocer si una
 partición es un diagrama de Voronoi y calcular, en caso afirmativo, los
 generadores del diagrama.
 Para una partición que no sea un diagrama de Voronoi, cabe plantearse cuál
 es el diagrama de Voronoi que mejor se ajusta a la partición.
 Es decir, cuál es el diagrama para el que la suma de las diferencias simétricas
 entre sus regiones y las respectivas regiones de la partición se minimiza.
 En este proyecto se propone desarrollar una herramienta software para ajustar
 particiones planas mediante diagramas de Voronoi.
\end_layout

\begin_layout Part
PROBLEM DATA
\end_layout

\begin_layout Section
First version
\end_layout

\begin_layout Standard
The input data for the problem is a partition of the square unit.
 That is, a set of polygons whose union is the square unit and, for every
 two polygons, its intersection is at most a straight line.
 More precisely, each polygon is given as a set of ordered points with two
 coordinates given with a negative orientation (clock-wise).
 At first, we know we will be working only with convex polygons (that is,
 all internal angles are less or equal than 180 degrees).
\end_layout

\begin_layout Section
Subtasks
\end_layout

\begin_layout Standard
In order to solve the problem, we need to solve different subtasks in which
 the solution will rely on.
 Those are: 
\end_layout

\begin_layout Itemize
Calculating a set of starting seed points from which the solution will be
 approximated.
 
\end_layout

\begin_layout Itemize
Obtaining the Voronoi diagram from an arbitrary set of points.
 
\end_layout

\begin_layout Itemize
Adjusting the Voronoi diagram to the square unit.
 
\end_layout

\begin_layout Itemize
Calculating the symmetric difference between the Voronoi diagram and the
 given partition.
 
\end_layout

\begin_layout Itemize
Choosing a criterion for searching the optimal solution.
\end_layout

\begin_layout Itemize
Calculating a set of starting seed points from which the solution will be
 approximated.
\end_layout

\begin_layout Standard
For calculating the seed points, a simple method we can use is, knowing
 that all polygons are convex, simply calculate each seed point as the average
 of each coordinates for all points of that polygon.
\end_layout

\begin_layout Itemize
Obtaining the Voronoi diagram from an arbitrary set of points.
\end_layout

\begin_layout Itemize
For obtaining the Voronoi diagram of a given set of points, an external
 library is being used, Mesh - http://leebyron.com/mesh/ .
 That library is designed specifically for obtaining the Voronoi diagram
 in a non complex way for the programmer.
\end_layout

\begin_layout Itemize
Adjusting the Voronoi diagram to the square unit.
\end_layout

\begin_layout Standard
The first method I used for trimming the Voronoi diagram to the square unit
 was a bit naive.
 I tackled the problem directly instead of applying a “divide and conquer”
 algorithm, which resulted in an extra complexity in the logic behind it,
 which had an effect directly in the complexity of the code.
\end_layout

\begin_layout Standard
TODO: EXPLAIN MY FIRST METHOD
\end_layout

\begin_layout Standard
Another strategy consists of taking advantage of the line clipping algorithm.
 Once we have that problem solved, we simply need to clip each polygon to
 the four segments that make up the square.
\end_layout

\begin_layout Standard
TODO: EXPLAIN THE LINE CLIPPING ALGORITHM
\end_layout

\begin_layout Standard
- Calculating the symmetric difference between the Voronoi diagram and the
 given partition.
\end_layout

\begin_layout Standard
The symmetric difference of two polygons A and B can be defined as the area
 that belongs to either A or B, but not both.
 There are various ways in which the symmetric difference can be calculated.
\end_layout

\begin_layout Standard
The first method I thought of took advantage of knowing that all polygons
 would be convex (at least for the first version).
 We will be calculating the symmetric difference as the area of the union
 minus the area of the intersection.
 
\begin_inset Formula 
\[
SD(A,B)=A(A\bigcup B)-2\cdot A(A\bigcap B)
\]

\end_inset


\end_layout

\begin_layout Standard
For each pair of polygons (one from the given partition and its corresponding
 one from the Voronoi diagram), we first need to calculate all of their
 intersection points in some order.
 Then, we need to find a point contained inside both polygons, which will
 be used as an auxiliary point to calculate triangle areas.
\end_layout

\begin_layout Standard
We know that between each two intersections, there are two different paths
 connecting them, one from the partition polygon border and another one
 from the Voronoi polygon border.
 Note that these paths could be the same for extreme cases, which need to
 be handled specifically.
\end_layout

\begin_layout Standard
If from the arbitrary point we calculated previosly, we now obtain the areas
 of each path from them, it is clear that the bigger area belongs to the
 union and the smaller area belongs to the intersection.
 Then, we simply have to iterate through each consecutive pair of intersections
 and keep track of the total.
\end_layout

\begin_layout Standard
Note that with this method we are not explicitly calculating the intersection
 nor the union.
\end_layout

\begin_layout Standard
The method (NOT) currently implemented, suggested by Manuel, calculates
 the symmetric difference by substracting from the square unit area, the
 area of all the intersection polygons.
\end_layout

\begin_layout Standard
- Choosing a criterion for searching the optimal solution.
\end_layout

\begin_layout Standard
First approximation: Gradient Method
\end_layout

\begin_layout Standard
Simulated annealing
\end_layout

\begin_layout Standard
El pseudo-código del algoritmo es el siguiente: 1.
 Hallar un punto de cada región (elegimos el baricentro) 2.
 Hallar el diagrama de Voronoi para esos puntos 2.1.
 Hallar la intersección de ese diagrama con el cuadrado sobre el que estamos
 trabajando 3.
 Calcular la discrepancia entre el diagrama obtenido y la partición dato
 4.
 Desplazamos los puntos calculados en (1) mínimamente y comparamos los resultado
s contra los obtenidos 4.1 Si la discrepancia es menor, quiere decir que
 tenemos una solución mejor [1], por lo que la guardamos y seguimos probando
 4.2 Si la discrepancia es mayor, la solución actual es peor, por lo que
 la descartamos
\end_layout

\begin_layout Part
Bibliografía
\end_layout

\begin_layout Standard
https://processing.org – Open source programming language and IDE in which
 the whole project is coded 
\end_layout

\begin_layout Standard
http://leebyron.com/mesh/ - External processing library used for calculating
 the Voronoi diagrams
\end_layout

\begin_layout Standard
http://www.lyx.org/ - Document processor used for writing this thesis
\end_layout

\end_body
\end_document
